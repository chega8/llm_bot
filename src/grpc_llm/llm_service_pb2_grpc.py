# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

import src.grpc_llm.llm_service_pb2 as llm__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in llm_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning,
    )


class LLMStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PredictConversation = channel.unary_unary(
            '/llm.LLM/PredictConversation',
            request_serializer=llm__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=llm__service__pb2.PredictResponse.FromString,
            _registered_method=True,
        )
        self.PredictMessage = channel.unary_unary(
            '/llm.LLM/PredictMessage',
            request_serializer=llm__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=llm__service__pb2.PredictResponse.FromString,
            _registered_method=True,
        )
        self.PredictRAG = channel.unary_unary(
            '/llm.LLM/PredictRAG',
            request_serializer=llm__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=llm__service__pb2.PredictResponse.FromString,
            _registered_method=True,
        )
        self.PredictAgent = channel.unary_unary(
            '/llm.LLM/PredictAgent',
            request_serializer=llm__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=llm__service__pb2.PredictResponse.FromString,
            _registered_method=True,
        )
        self.Summary = channel.unary_unary(
            '/llm.LLM/Summary',
            request_serializer=llm__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=llm__service__pb2.PredictResponse.FromString,
            _registered_method=True,
        )
        self.GatherMessage = channel.unary_unary(
            '/llm.LLM/GatherMessage',
            request_serializer=llm__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=llm__service__pb2.empty.FromString,
            _registered_method=True,
        )
        self.ClearHistory = channel.unary_unary(
            '/llm.LLM/ClearHistory',
            request_serializer=llm__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=llm__service__pb2.empty.FromString,
            _registered_method=True,
        )


class LLMServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PredictConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictRAG(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictAgent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Summary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GatherMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'PredictConversation': grpc.unary_unary_rpc_method_handler(
            servicer.PredictConversation,
            request_deserializer=llm__service__pb2.PredictRequest.FromString,
            response_serializer=llm__service__pb2.PredictResponse.SerializeToString,
        ),
        'PredictMessage': grpc.unary_unary_rpc_method_handler(
            servicer.PredictMessage,
            request_deserializer=llm__service__pb2.PredictRequest.FromString,
            response_serializer=llm__service__pb2.PredictResponse.SerializeToString,
        ),
        'PredictRAG': grpc.unary_unary_rpc_method_handler(
            servicer.PredictRAG,
            request_deserializer=llm__service__pb2.PredictRequest.FromString,
            response_serializer=llm__service__pb2.PredictResponse.SerializeToString,
        ),
        'PredictAgent': grpc.unary_unary_rpc_method_handler(
            servicer.PredictAgent,
            request_deserializer=llm__service__pb2.PredictRequest.FromString,
            response_serializer=llm__service__pb2.PredictResponse.SerializeToString,
        ),
        'Summary': grpc.unary_unary_rpc_method_handler(
            servicer.Summary,
            request_deserializer=llm__service__pb2.PredictRequest.FromString,
            response_serializer=llm__service__pb2.PredictResponse.SerializeToString,
        ),
        'GatherMessage': grpc.unary_unary_rpc_method_handler(
            servicer.GatherMessage,
            request_deserializer=llm__service__pb2.PredictRequest.FromString,
            response_serializer=llm__service__pb2.empty.SerializeToString,
        ),
        'ClearHistory': grpc.unary_unary_rpc_method_handler(
            servicer.ClearHistory,
            request_deserializer=llm__service__pb2.PredictRequest.FromString,
            response_serializer=llm__service__pb2.empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'llm.LLM', rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('llm.LLM', rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class LLM(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PredictConversation(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.LLM/PredictConversation',
            llm__service__pb2.PredictRequest.SerializeToString,
            llm__service__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PredictMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.LLM/PredictMessage',
            llm__service__pb2.PredictRequest.SerializeToString,
            llm__service__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PredictRAG(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.LLM/PredictRAG',
            llm__service__pb2.PredictRequest.SerializeToString,
            llm__service__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PredictAgent(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.LLM/PredictAgent',
            llm__service__pb2.PredictRequest.SerializeToString,
            llm__service__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Summary(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.LLM/Summary',
            llm__service__pb2.PredictRequest.SerializeToString,
            llm__service__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GatherMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.LLM/GatherMessage',
            llm__service__pb2.PredictRequest.SerializeToString,
            llm__service__pb2.empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ClearHistory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.LLM/ClearHistory',
            llm__service__pb2.PredictRequest.SerializeToString,
            llm__service__pb2.empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
